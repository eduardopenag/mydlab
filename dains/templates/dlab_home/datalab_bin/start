#!/bin/bash
#
# who        when        what
# ---------  ----------  ----------------------------------------------
# jgil       2019-05-29  Created


# INSTRUCTIONS:
#
# To add a new option:
# 1) Update "USAGE"
# 2) Create a new "MAIN function"
# 3) Call the new function from "Body"


USAGE="$(cat << EOF
Usage: dlab start [ all | SERVICE1 [ SERVICE2 ... ] ]

    all: 
        Starts all services in order.

    SERVICE:
        Starts the specified service or services.

EOF
)"


# ------------------------------------------------------------------
# --- MAIN functions -----------------------------------------------
# ------------------------------------------------------------------

# --- start local service ----------------------------------------------------
start_local() {
    IP_SUFFIX=1
    echo "epena --------------------->"
    echo $1
    echo "epana ------------"
    for host in $( echo "$DLAB_NODES" | tr "," " " ); do
      if [ "$1" == "cassandra" ] || [ "$1" == "elassandra" ]; then
        cmd="IP_SUFFIX=$IP_SUFFIX docker-compose -f $(pwd)/docker-compose/dc_$1.yml up -d"
      elif [[ "$1" == "elastic" ]]; then
        cmd="HOSTAME=$host docker-compose -f $(pwd)/docker-compose/dc_$1.yml up -d"
      fi
      dryExec ssh $host "$cmd" &
      IP_SUFFIX=$(( $IP_SUFFIX + 1 ))
    done
    wait
}

# --- start stack service ----------------------------------------------------
start_stack() {
  # The stack name is inferred from dc_XXX.yml name, and is ${DLAB_ELASTICNAME}-XXX.
  dryExec docker stack deploy --compose-file docker-compose/dc_$service.yml ${DLAB_NAME}_$service

  PROXY_MODIFIED=No

  # Do we need to modify in PUBLIC proxy?
  SHORT=$DLAB_HOME/toolscfg/nginx
  if ls $SHORT/services/$service* &>/dev/null; then
    debug "Hey, there is a public proxy file to modify"
    dryExec cp $SHORT/services/$service.up.conf $SHORT/available/$service.up.conf
    dryExec cp $SHORT/services/$service.sv.conf $SHORT/available/$service.sv.conf
    PROXY_MODIFIED=Yes
  fi
  
  # Do we need to modify in ADMIN proxy?
  SHORT=$DLAB_HOME/toolscfg/nginx_admin
  if ls $SHORT/services/$service* &>/dev/null; then
    debug "Hey, there is a admin proxy file to modify"
    dryExec cp $SHORT/services/$service.up.conf $SHORT/available/$service.up.conf
    dryExec cp $SHORT/services/$service.sv.conf $SHORT/available/$service.sv.conf
    PROXY_MODIFIED=Yes
  fi

  # Now restart proxy
  if [[ "$PROXY_MODIFIED" == "Yes" ]]; then
    debug "Restarting proxy because service $service"
    bash stop $ORIGINAL_PARAMS proxy
    start proxy
  fi

  
}

# --- start service ----------------------------------------------------
start() {
    verbose "Executing: dlab start $1"
    debug "PARAMS = $@"
    service=$1; shift

    if [[ "$(get_local_services)" =~ $service ]]; then
      start_local $service
    elif [[ "$(get_stack_services)" =~ $service ]]; then
      start_stack $service
    else
      exitMsg "service $service not found"
    fi

    # Are there more services to start?
    if [[ "$@" != "" ]]; then start "$@"; fi
} 


# --- start all ----------------------------------------------------
start_all() {
    debug "Invoked: dlab start all (except registry)"
    start $(get_local_services) $(get_stack_services)
}


# --- Ancillary functions ------------------------------------------
cd $(dirname $0 ) && source ./datalab_envs.sh


# --- Options processing -------------------------------------------
# Mostly done in datalab_env.sh
if [ $# = 0 ] ; then usage ; fi

ARGUMENT=$1; shift
REMAINDER=$@

debug "ARGUMENT = $ARGUMENT"
debug "Remaining args: $@"


# --- Locks -------------------------------------------------------
create_lock_file


# ------------------------------------------------------------------
# --- Body ---------------------------------------------------------
# ------------------------------------------------------------------
debug "Selecting what to run based on ARGUMENT=$ARGUMENT"
case $ARGUMENT in
     all)      
          start_all
          ;;
     *)
          start $ARGUMENT
          ;;
esac


# If there are more arguments... call me recursively.

REMAINDER=$(echo "$REMAINDER" | sed s/"$ARGUMENT"//g )
debug "Remaining args after executing $ARGUMENT $REMAINDER"

if [[ $(echo "$REMAINDER" | awk '{print NF}' ) > 0 ]]; then
    debug "Continuing, after removing $LOCK_FILE"

    remove_lock_file
    ifDebug set -x
    bash $(basename $0) $ORIGINAL_PARAMS $REMAINDER
    set +x
fi




debug "$0 Normal exit"
# -----------------------------------------------------------------
